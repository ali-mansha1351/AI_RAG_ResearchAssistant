name: Deploy to Google Cloud Run

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: ai-rag-assistant
  REGION: us-central1

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest

    # Add "id-token" with the intended permissions.
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CR_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker

      - name: Build Docker image
        run: |
          docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .

      - name: Push Docker image to Google Container Registry
        run: |
          docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          flags: |
            --allow-unauthenticated
            --memory=4Gi
            --cpu=2
            --timeout=3600
            --max-instances=10
            --min-instances=0
            --concurrency=1000
            --port=8501
          env_vars: |
            GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
            APP_NAME=AI_RAG_Application
            APP_VERSION=1.0.0
            DEBUG=false
            LLM_MODEL=llama-3.3-70b-versatile
            EMBEDDING_MODEL=all-MiniLM-L6-v2
            LOG_LEVEL=INFO
            USE_LOCAL_EMBEDDINGS=true

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}

      - name: Test deployment
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.url }}/_stcore/health || exit 1
